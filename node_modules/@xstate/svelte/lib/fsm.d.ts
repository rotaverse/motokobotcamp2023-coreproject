import { EventObject, StateMachine, Typestate } from '@xstate/fsm';
interface UseMachineOptions<TContext extends object, TEvent extends EventObject> {
    /**
     * If provided, will replace machine's `actions`.
     */
    actions: StateMachine.ActionMap<TContext, TEvent>;
}
export declare function useMachine<TContext extends object, TEvent extends EventObject, TTypestate extends Typestate<TContext>>(machine: StateMachine.Machine<TContext, TEvent, TTypestate>, options?: Partial<UseMachineOptions<TContext, TEvent>>): {
    state: import("svelte/store").Readable<StateMachine.State<TContext, TEvent, TTypestate>>;
    send: (event: TEvent | TEvent["type"]) => void;
    service: StateMachine.Service<TContext, TEvent, TTypestate>;
};
export {};
//# sourceMappingURL=fsm.d.ts.map