"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMachine = void 0;
var store_1 = require("svelte/store");
var xstate_1 = require("xstate");
function useMachine(machine, options) {
    if (options === void 0) { options = {}; }
    var context = options.context, guards = options.guards, actions = options.actions, activities = options.activities, services = options.services, delays = options.delays, rehydratedState = options.state, interpreterOptions = __rest(options, ["context", "guards", "actions", "activities", "services", "delays", "state"]);
    var machineConfig = {
        context: context,
        guards: guards,
        actions: actions,
        activities: activities,
        services: services,
        delays: delays
    };
    var resolvedMachine = machine.withConfig(machineConfig, function () { return (__assign(__assign({}, machine.context), context)); });
    var service = (0, xstate_1.interpret)(resolvedMachine, interpreterOptions).start(rehydratedState ? new xstate_1.State(rehydratedState) : undefined);
    var state = (0, store_1.readable)(service.state, function (set) {
        service.subscribe(function (state) {
            if (state.changed) {
                set(state);
            }
        });
        return function () {
            service.stop();
        };
    });
    return { state: state, send: service.send, service: service };
}
exports.useMachine = useMachine;
